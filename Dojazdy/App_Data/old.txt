@{
    ViewBag.Title = "Home Page";
}

<div id="map"></div>

<script>
    let map = L.map('map').setView([52.232, 21.007], 13);

    L.tileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(map);

    let nieaktywne = L.layerGroup().addTo(map);
    let pojazdy = {};
    let czas = 0;
    let i = 0;
    function api() {
        $.ajax({
            url: "/Home/Pojazdy",
            success: function (result) {
                //console.log(result);
                let granica = new Date().setMinutes(new Date().getMinutes() - 1);
                if (result == "Błędna metoda lub parametry wywołania") {
                    console.log("Błąd połączenia z API");
                } else {
                    nieaktywne.clearLayers();
                    Object.keys(pojazdy).forEach(function (key) {
                        pojazdy[key].stare = pojazdy[key].nowe;
                    });
                    czas = new Date();
                    for (pojazd of result.result) {
                        if (new Date(pojazd.Time) > granica) {
                            i++;
                            if (!(pojazd.VehicleNumber in pojazdy)) {
                                pojazdy[pojazd.VehicleNumber] = {};
                            }
                            pojazdy[pojazd.VehicleNumber].nowe = pojazd;
                        } else {
                            L.circle([pojazd.Lat, pojazd.Lon], { radius: 20, color: "gray" })
                                .bindPopup("Linia " + pojazd.Lines + "<br>" + "Czas aktualizacji: " + pojazd.Time)
                                .addTo(nieaktywne);
                        }
                    }
                    if (i == 2) {
                        L.Util.requestAnimFrame(odswiez);
                    }
                }
                //console.log(pojazdy);
            }
        });
    }

    let aktywne = L.layerGroup().addTo(map);
    function odswiez() {
        aktywne.clearLayers();
        let dt = new Date() - czas;
        Object.keys(pojazdy).forEach(function (key) {
            if (!("stare" in pojazdy[key])) {
                delete pojazdy[key];
            }
            let dx = pojazdy[key].nowe.Lat - pojazdy[key].stare.Lat;
            let dy = pojazdy[key].nowe.Lon - pojazdy[key].stare.Lon;
            L.circle([pojazdy[key].stare.Lat + dx * dt / 10000, pojazdy[key].stare.Lon + dx * dt / 10000], { radius: 20, color: "blue" })
                .bindPopup("Linia " + pojazdy[key].Lines + "<br>" + "Czas aktualizacji: " + pojazdy[key].Time)
                .addTo(aktywne);
        });
        L.Util.requestAnimFrame(odswiez);
    }

    api();
    setInterval(api, 10000);
</script>

foreach(JToken przystanek in data)
            {
                Przystanek nowy = new Przystanek();
                foreach(JToken wartosc in przystanek.Children())
                {
                    switch(wartosc.SelectToken("key").ToString())
                    {
                        case "zespol":
                            nowy.Id = int.Parse(wartosc.SelectToken("value").ToString());
                            break;
                        case "slupek":
                            nowy.Slupek = int.Parse(wartosc.SelectToken("value").ToString());
                            break;
                        case "nazwa_zespolu":
                            nowy.Nazwa = wartosc.SelectToken("value").ToString();
                            break;
                        case "id_ulicy":
                            nowy.Id = int.Parse(wartosc.SelectToken("value").ToString());
                            break;
                        case "zespol":
                            nowy.Id = int.Parse(wartosc.SelectToken("value").ToString());
                            break;
                        case "zespol":
                            nowy.Id = int.Parse(wartosc.SelectToken("value").ToString());
                            break;
                        case "zespol":
                            nowy.Id = int.Parse(wartosc.SelectToken("value").ToString());
                            break;
                        case "zespol":
                            nowy.Id = int.Parse(wartosc.SelectToken("value").ToString());
                            break;
                    }
                }
            }